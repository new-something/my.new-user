name: my-new-user CI

on:	
  push:	
    branches:	
      - master
  pull_request:	
    branches:	
      - master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:	
  build:	
    name: Build and Push to ECR
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Configure AWS credentials	
        uses: aws-actions/configure-aws-credentials@v1	
        with:	
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}	
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}	
          aws-region: ap-northeast-2	


      - name: Login to Amazon ECR	
        id: login-ecr	
        uses: aws-actions/amazon-ecr-login@v1	

      - name: Build, tag, and push image to Amazon ECR	
        id: build-image	
        env:	
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}	
          ECR_REPOSITORY: my-new-user
          IMAGE_TAG: latest	
        run: |	
          # Build a docker container and	
          # push it to ECR so that it can	
          # be deployed to ECS.	
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .	
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG	
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
